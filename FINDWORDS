#include <iostream>
#include <cstring>

using namespace std;
const int cols = 16, rows = 15;

 char words[rows][cols] = {"tgbwwinterwsesn",
                                "aaunttmmhfoodnb",
                                "jlwcqldzmpmvdmr",
                                "asagmquwvvbsohi",
                                "bwplotanadtpgnc",
                                "rewngodjcpnatnk",
                                "eeotwosbqharrsa",
                                "azcgeswewnaknpb",
                                "dinnerqodlwdcar",
                                "onopkwmparktzcc",
                                "qbfrogmamwpweey",
                                "lqzqnnmrzjjsclg",
                                "mosgzczetdbooto",
                                "pdcrzmsngrdnrpz",
                                "ohnkzwaterjgtra"};

char *getWordVertical(int x);
char *reverse(char *);
bool searchVertical(char ketik[]);
bool searchHorizontal(char ketik[]);
bool revVertikal(char ketik[]);
bool revHorizontal(char ketik[]);

int main()
{
    char word[16];
    int n;
    cin>>n;
    for (int i=0;i<n;i++){
        cin.getline(word,16,'\n');
        if (searchVertical(word) || searchHorizontal(word))
            cout << "Ada\n";
        else 
            cout << "Tidak Ada\n";
    }
    return 0;
}

char *getWordVertical(int x)
{
	char kata[15];
 	for (int i = 0; i < 15; i++)
    {
        kata[i] = words[i][x];
    }
	return kata;
};

bool searchVertical(char ketik[])
{
	char *cek;
	char * kata;
	
	for (int i = 0; i < 15; i++)
    {
        kata = getWordVertical(i);
        cek = strstr(kata, ketik);
        if(cek != NULL){
	        return true;
	    }
    }
    
    return false;
}

bool searchHorizontal(char ketik[])
{
	char *cek;
	char * word;
	for (int i = 0; i < 15; i++)
    {
		cek = strstr(words[i], ketik);
	    if(cek != NULL){
	        return true;
	    }
    }    
    return false;
}

bool revVertikal(char ketik[])
{
	char *cek;
	char word[rows];
	for (int i=0;i<sizeof word;i++){
        for (int j = 0; j < 15; j++){
            word[j] = words[j][i];
        }
        reverse(word, word+strlen(word));
        cek=strstr(word, ketik);
        if(cek!= NULL){
	        return true;
	    }
    }
    return false;
}
bool revHorizontal(char ketik[])
{
	char *cek;
	char word[rows];
	for (int i=0;i<15;i++){
    	for(int j=0;j<sizeof word;j++){
	    	word[j]=words[i][j];
		}
	    reverse(word, word+strlen(word));
	    cek=strstr(word, ketik);
	    if(cek!=NULL){
	        return true;
	    }
    }
    return false;
}
